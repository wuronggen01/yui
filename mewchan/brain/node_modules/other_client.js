var mewUtil = require("mew_util");

var OTHERPCManager = function(rootURL,appID,appSecret){

    if (!/^(http|https):\/\//.test(rootURL)){
        throw new Error("host error");
    }

    this.rootURL   = rootURL;
    this.appID     = appID;
    this.appSecret = appSecret;
    this.otherWebClient = new mewUtil.HTTPClient(rootURL);
};

OTHERPCManager.prototype.ping  = function(pingAPI){

    var manager = this;

    return $.async(function(){
        if ("http" == pingAPI){
            var step = this;
            manager.otherWebClient.request(manager.rootURL + "/gateway/api/ping.jsp",{
                "method": "GET",
                "dataType" : "text",
                "onError": function(error){
                    step.reject(error);
                },
                "onSuccess" : function(response){
                    step.next(response);
                }
            });
        } else {
            manager.call(pingAPI ? pingAPI : "other.ping",[],this.test);
        }
    });
}

OTHERPCManager.prototype.login = function( account , password , loginAPI){

    var manager = this;

    return $.async(function(){

        if ("http" == loginAPI){

            var step = this;

            manager.otherWebClient.request(manager.rootURL + "/gateway/api/ajax_login.jsp",{
                "data": {
                    "account" : account,
                    "password" : password
                },
                "method": "POST",
                "onError": function(error){
                    step.reject(error);
                },
                "onSuccess" : function(response){
                    step.next(response.token);
                }
            });

        } else {

            manager.request(loginAPI ? loginAPI : "other.login",{
                "account" : account,
                "password" : password
            }).replied(this.test);
        }

    }).then(function(result){

        manager.accessToken = result.token;

        this.next(result);

    });

};

OTHERPCManager.prototype.call = function(method,params,callback){
    this.request(method,params).replied(callback);
}

OTHERPCManager.prototype.request = function() {
    var settings = $.matchArguments([
        ["method"],
        ["method" , "parameters"],
        ["session", "method"  , "parameters"]
    ], {
        "method": "string",
        "parameters":  "any",
        "session":  {
            "acceptTypes": "object",
            "defaultValue": {}
        }
    }, arguments);

    if (!settings.parameters) {
        settings.parameters = [];
    } else if (!Array.isArray(settings.parameters)){
        settings.parameters = [settings.parameters];
    }

    var replyAction = function(){};
    var replyActionDefined = false;
    var headers = {};

    var otherRequestStep = {
        "replied" : function(nextAction){
            if (replyActionDefined) {
                throw new Error("Only on reply action can be defined");
            }
            replyActionDefined = true;
            replyAction = nextAction;
            return otherRequestStep;
        }
    };

    if (this.appID && this.appSecret) {

        headers["other-app-id"] = this.appID;
        headers["other-app-secret"] = this.appSecret;

    }

    

    var data = {
        "query": JSON.stringify({
            "jsonrpc": "2.0",
            "method": settings.method,
            "params": settings.parameters,
            "id": new Date().getTime()
        }),
        "access_token" : this.accessToken
    };

    var callback = function(error, result){
        if (replyActionDefined){
            replyAction.call(null,error ? new Error(error.msg) : null,result);
        }
    };

    this.otherWebClient.request(this.rootURL + "/gateway/api/jsonrpc.jsp",{
        "data": data,
        "method": "POST",
        "onError": callback,
        "headers" : headers,
        "onSuccess" : function(response){
            callback(response.error,response.result);
        }
    });

    return otherRequestStep;
};

module.exports = OTHERPCManager;
